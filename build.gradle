plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'application'
}

group = 'com.github.osrsGoalsTracker'
version = '2.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
    withJavadocJar()
}

dependencies {
    api 'com.github.osrsGoalsTracker:osrs-player-data-interface:v2.0.0'
    
    // Core dependencies
    implementation 'com.google.inject:guice:7.0.0'
    implementation 'jakarta.inject:jakarta.inject-api:2.0.1'
    implementation 'org.projectlombok:lombok:1.18.30'
    
    // Jackson dependencies with BOM
    implementation platform('com.fasterxml.jackson:jackson-bom:2.15.3')
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    
    // Annotation processors
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    
    // Testing
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core:5.7.0'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += [
        '-Xlint:all',
        '-Xlint:-processing'  // Keep this for now as runtime annotations are expected to show warnings
    ]
}

tasks.withType(Test).configureEach {
    jvmArgs = [
        '-XX:+IgnoreUnrecognizedVMOptions',
        '--add-opens=java.base/java.lang=ALL-UNNAMED',
        '--add-opens=java.base/java.util=ALL-UNNAMED',
        '-XX:+UseG1GC',
        '-Xms256m',
        '-Xmx512m',
        '-XX:+AlwaysPreTouch',
        '-Xshare:off'
    ]
}

tasks.withType(JavaExec).configureEach {
    jvmArgs = [
        '-XX:+IgnoreUnrecognizedVMOptions',
        '--add-opens=java.base/java.lang=ALL-UNNAMED',
        '--add-opens=java.base/java.util=ALL-UNNAMED',
        '-XX:+UseG1GC',
        '-Xms256m',
        '-Xmx512m',
        '-XX:+AlwaysPreTouch',
        '-Xshare:off'
    ]
}

testing {
    suites {
        test {
            useJUnitJupiter()
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            pom {
                name = 'OSRS Player Data API'
                description = 'Implementation of the OSRS Player Data Interface for fetching player statistics'
                url = 'https://github.com/osrsGoalsTracker/osrs-player-data-api'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'osrsGoalsTracker'
                        name = 'OSRS Goals Tracker'
                    }
                }
            }
        }
    }
}

// Only configure application plugin in local builds
if (!System.getenv('JITPACK')) {
    application {
        mainClass = 'com.osrs_hiscores_fetcher.impl.example.Example'
    }
} 